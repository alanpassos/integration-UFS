
INSERT INTO TB_CLIENTE_EXE9 (CD_CLIENTE, NM_CLIENTE, CPF, DT_NASCIMENTO)
VALUES (001, 'JULIANO', 253698452, '1974/07/02'),  
		(002, 'FERNANDA', 254215352, '1954/11/05'),
		(003, 'CRISTIANO', 12565236, '1984/02/10'),
		(004, 'ROBERTA', 85423657, '1968/08/04')

SELECT * FROM TB_CLIENTE_EXE9

INSERT INTO TB_CONTA_EXE9
VALUES (2365, 001, 4035.0),
		(1452, 002, 800.0),
		(2536, 002, 7800.0),
		(9874, 003, 1650.0),
		(3658, 004, 15000.0)

SELECT * FROM TB_CONTA_EXE9


/*
As questões abaixo devem ser resolvidas com base no esquema do arquivo 
Exercício
0
9
.sql
1.
Criar  um  procedimento  SP_CLASSIFICA_CLIENTE  para  classificar  um  Cliente  como 
NORMAL
ou 
VIP
. O procedimento deve receber como parâmetros de entrada a qu
antidade 
de contas que o Cliente possui e a  soma dos saldos de suas contas. O procedimento deve 
apresentar um parâmetro de saída  informando se o Cliente é 
NORMAL
ou 
VIP
. O cliente 
será classificado de acordo com a seguinte regra: 
Se o Saldo Total >= 10.0
00
O Cliente é VIP
Se o Saldo Total >=  5.000 e  < 10.000 e o Cliente Possuir mais de 2 contas
O Cliente é VIP
Caso Contrário o Cliente é Normal.
*/



---------- APENAS PARA TESTE DO INNER JOIN-------------------------
SELECT CL.NM_CLIENTE AS 'CLIENTE',  COUNT(NR_CONTA) 'NÚMERO DE CONTAS', SUM(SALDO) AS 'SALDO TOTAL' FROM TB_CONTA_EXE9 CT
INNER JOIN TB_CLIENTE_EXE9 CL ON (CL.CD_CLIENTE = CT.CD_CLIENTE)
GROUP BY CL.NM_CLIENTE



CREATE PROCEDURE SP_CLASSIFICA_CLIENTE_EXE9 (@NUM_CONTAS INT, @SALDO_TOTAL NUMERIC (10,2), @MENSAGEM BIT OUTPUT) AS
IF (@SALDO_TOTAL >= 10000.0)
	BEGIN
		SET @MENSAGEM = 1
	END
ELSE IF (@SALDO_TOTAL >= 5000.0 AND @SALDO_TOTAL < 10000.0 AND @NUM_CONTAS >= 2)
	BEGIN
		SET @MENSAGEM = 1
	END
ELSE
	BEGIN
		SET @MENSAGEM = 0
	END

DECLARE @MENSAGEM BIT
EXEC SP_CLASSIFICA_CLIENTE_EXE9 1, 4000.0, @MENSAGEM OUTPUT
PRINT @MENSAGEM


/*
2.
Criar  um  procedimento  SP_ATUALIZA_TIPO_CLENTE  utilizando  cursores  para  varrer 
a tabela TB_CLIENTE
e, utilizando o procedimento desenvolvido da questão 1, atualizar 
o  atributo  TIPO_CLIENTE  na  tabela  TB_CLIENTE  para 
NORMAL
ou 
VIP
de  acordo 
com as informações contidas na tabela TB_CONTA. 
*/

CREATE PROCEDURE SP_ATUALIZA_TIPO_CLIENTE_EXE9 AS
DECLARE @CD_CLIENTE INT, @NM_CONTAS INT, @SALDO_TOTAL NUMERIC (10,2), @RESULTADO BIT
DECLARE C_ATUALIZA_TIPO_CLIENTE_EXE9 CURSOR FOR
SELECT CL.CD_CLIENTE, COUNT(CO.NR_CONTA), SUM(CO.SALDO) FROM TB_CONTA_EXE9 CO
INNER JOIN TB_CLIENTE_EXE9 CL ON (CL.CD_CLIENTE = CO.CD_CLIENTE)
GROUP BY CL.CD_CLIENTE

OPEN C_ATUALIZA_TIPO_CLIENTE_EXE9
FETCH C_ATUALIZA_TIPO_CLIENTE_EXE9 INTO @CD_CLIENTE, @NM_CONTAS, @SALDO_TOTAL

WHILE (@@FETCH_STATUS = 0)
	BEGIN
		EXEC SP_CLASSIFICA_CLIENTE_EXE9 @NM_CONTAS, @SALDO_TOTAL, @RESULTADO OUTPUT

		IF (@RESULTADO = 1)
			BEGIN
				UPDATE TB_CLIENTE_EXE9 SET TIPO_CLIENTE = 'VIP' WHERE (CD_CLIENTE = @CD_CLIENTE) 
			END
		ELSE
			BEGIN
				UPDATE TB_CLIENTE_EXE9  SET TIPO_CLIENTE = 'NORMAL' WHERE (CD_CLIENTE = @CD_CLIENTE) 
			END
		
		FETCH C_ATUALIZA_TIPO_CLIENTE_EXE9 INTO @CD_CLIENTE, @NM_CONTAS, @SALDO_TOTAL
	END
CLOSE C_ATUALIZA_TIPO_CLIENTE_EXE9
DEALLOCATE C_ATUALIZA_TIPO_CLIENTE_EXE9



SELECT * FROM TB_CLIENTE_EXE9
SELECT CL.NM_CLIENTE AS 'CLIENTE',  COUNT(NR_CONTA) 'NÚMERO DE CONTAS', SUM(SALDO) AS 'SALDO TOTAL' FROM TB_CONTA_EXE9 CT
INNER JOIN TB_CLIENTE_EXE9 CL ON (CL.CD_CLIENTE = CT.CD_CLIENTE)
GROUP BY CL.NM_CLIENTE

EXEC SP_ATUALIZA_TIPO_CLIENTE_EXE9