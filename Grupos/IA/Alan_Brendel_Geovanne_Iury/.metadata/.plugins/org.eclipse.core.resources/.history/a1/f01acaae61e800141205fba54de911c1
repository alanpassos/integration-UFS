class Graph
   {
   private final int MAX_VERTS = 128;
   private Vertex vertexList[]; 
   private int adjMat[][];   
   private int nVerts;  
   private Queue theQueue;
   private int posicaoFinal;
   private int posicaoInicial;
// ------------------------------------------------------------
   public Graph()   
      {
      vertexList = new Vertex[MAX_VERTS];
                                       
      adjMat = new int[MAX_VERTS][MAX_VERTS];
      nVerts = 0;
      for(int y=0; y<MAX_VERTS; y++)   
         for(int x=0; x<MAX_VERTS; x++)  
            adjMat[x][y] = 0;
      
      theQueue = new Queue();
      
      } 
// ------------------------------------------------------------
   public void addVertex(char lab, boolean salaEsquerdaSuja, boolean salaDireitaSuja, char posicaoAspirador)
      {
      vertexList[nVerts++] = new Vertex(lab, salaEsquerdaSuja, salaDireitaSuja, posicaoAspirador);
      }
// ------------------------------------------------------------
   public void addEdge(int start, int end)
      {
      adjMat[start][end] = 1;
      adjMat[end][start] = 1;
      }
// ------------------------------------------------------------
   public void setStartEnd(char posicaoInicial, char posicaoFinal)
   	{    
	   	this.posicaoInicial = searchPos(posicaoInicial);
	}
// ------------------------------------------------------------
   public int searchPos(char lab)
   	{
	    for (int i=0;i<nVerts;i++)
	        if(vertexList[i].label==lab)
	            return i;
	    return -1;
	}
// ------------------------------------------------------------  
   public void displayVertex(int v)
      {
      System.out.print(vertexList[v].label);
      }
// -------------------------------------------------------------
   public void bfs()                   
      {                               
      vertexList[posicaoInicial].wasVisited = true; 
      displayVertex(posicaoInicial);               
      theQueue.insert(posicaoInicial);              
      int v2;
      int v1 = 0; 

      while((!vertexList[v1].estadoFinal()) && !theQueue.isEmpty() )    
         {
         v1 = theQueue.remove();   

         while( (v2=getAdjUnvisitedVertex(v1)) != -1  )
            {                      
        	
            vertexList[v2].wasVisited = true;  
            vertexList[v2].pai = v1;
            displayVertex(v2);                 
            theQueue.insert(v2);              
            }   
         }  

      this.posicaoFinal = v1;
      for(int j=0; j<nVerts; j++)            
         vertexList[j].wasVisited = false;
      }  
// ------------------------------------------------------------
   public int getAdjUnvisitedVertex(int v)
      {
      for(int j=0; j<nVerts; j++)
         if(adjMat[v][j]==1 && vertexList[j].wasVisited==false)
            return j;
      return -1;
      } 
// ------------------------------------------------------------
 	public void geraCaminho()
 	{
 		int[] caminhoInverso = new int[nVerts];
 		int j = posicaoFinal;
 		int indiceArray = 0;
 		
 		while(j != posicaoInicial)
 		{	
 			
 			caminhoInverso[indiceArray] = vertexList[j].pai;
 			j = vertexList[j].pai;
 			indiceArray++;
 		}
 		caminhoInverso[indiceArray] = posicaoInicial;
 		
 		for (int i = (indiceArray-1); i >= 0; i--) {
			displayVertex(caminhoInverso[i]);
		}
 	}
 //------------------------------------------------------------

   } 

